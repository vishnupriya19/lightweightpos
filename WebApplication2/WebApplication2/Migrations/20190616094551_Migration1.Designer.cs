// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Model;

namespace WebApplication2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190616094551_Migration1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication2.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("categoryId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MerchantId")
                        .HasColumnName("merchantId");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("CategoryId", "MerchantId");

                    b.HasIndex("MerchantId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebApplication2.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customerId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MerchantId")
                        .HasColumnName("merchantId");

                    b.Property<string>("Mail")
                        .HasColumnName("mail")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<int?>("Points")
                        .HasColumnName("points");

                    b.HasKey("CustomerId", "MerchantId");

                    b.HasIndex("MerchantId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WebApplication2.Model.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("designationId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("DesignationId");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("WebApplication2.Model.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employeeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MerchantId")
                        .HasColumnName("merchantId");

                    b.Property<DateTime?>("Dateofjoining")
                        .HasColumnName("dateofjoining")
                        .HasColumnType("datetime");

                    b.Property<int>("DesignationId")
                        .HasColumnName("designationId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<double?>("Salary")
                        .HasColumnName("salary");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(50);

                    b.HasKey("EmployeeId", "MerchantId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("MerchantId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("WebApplication2.Model.Merchant", b =>
                {
                    b.Property<int>("MerchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("merchantId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("OrganizationName")
                        .HasColumnName("organizationName")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.HasKey("MerchantId");

                    b.ToTable("Merchant");
                });

            modelBuilder.Entity("WebApplication2.Model.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("productId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MerchantId")
                        .HasColumnName("merchantId");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("categoryId");

                    b.Property<double?>("Comission")
                        .HasColumnName("comission");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("createdDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnName("modifiedUserName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Rating")
                        .HasColumnName("rating");

                    b.Property<double>("Sellingprice")
                        .HasColumnName("sellingprice");

                    b.Property<double>("Unitcost")
                        .HasColumnName("unitcost");

                    b.HasKey("ProductId", "MerchantId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("CategoryId", "MerchantId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("WebApplication2.Model.Quantity", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("productId");

                    b.Property<int>("MerchantId")
                        .HasColumnName("merchantId");

                    b.Property<int?>("DepletionQuantity")
                        .HasColumnName("depletionQuantity");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnName("quantityInStock");

                    b.Property<int?>("QuantityRemaining")
                        .HasColumnName("quantityRemaining");

                    b.Property<int?>("QuantitySold")
                        .HasColumnName("quantitySold");

                    b.HasKey("ProductId", "MerchantId");

                    b.HasAlternateKey("MerchantId", "ProductId");

                    b.ToTable("Quantity");
                });

            modelBuilder.Entity("WebApplication2.Model.Category", b =>
                {
                    b.HasOne("WebApplication2.Model.Merchant", "Merchant")
                        .WithMany("Category")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("FK_Category_Merchant");
                });

            modelBuilder.Entity("WebApplication2.Model.Customer", b =>
                {
                    b.HasOne("WebApplication2.Model.Merchant", "Merchant")
                        .WithMany("Customer")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("FK_Customer_Merchant");
                });

            modelBuilder.Entity("WebApplication2.Model.Employee", b =>
                {
                    b.HasOne("WebApplication2.Model.Designation", "Designation")
                        .WithMany("Employee")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_Employee_Designation");

                    b.HasOne("WebApplication2.Model.Merchant", "Merchant")
                        .WithMany("Employee")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("FK_Employee_Merchant");
                });

            modelBuilder.Entity("WebApplication2.Model.Product", b =>
                {
                    b.HasOne("WebApplication2.Model.Merchant", "Merchant")
                        .WithMany("Product")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("FK_Product_Merchant");

                    b.HasOne("WebApplication2.Model.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId", "MerchantId")
                        .HasConstraintName("FK_Product_Category");
                });

            modelBuilder.Entity("WebApplication2.Model.Quantity", b =>
                {
                    b.HasOne("WebApplication2.Model.Product", "Product")
                        .WithOne("Quantity")
                        .HasForeignKey("WebApplication2.Model.Quantity", "ProductId", "MerchantId")
                        .HasConstraintName("FK_Quantity_Product");
                });
#pragma warning restore 612, 618
        }
    }
}
